/**
 * Created by ahmha02 on 16-03-04.
 */
// www.js

// BASE SETUP
// =============================================================================

// call the packages we need
var express    = require('express');        // call express
var bodyParser = require('body-parser');
var Config = require('config.json');

var app        = express();                 // define our app using express

// configure app to use bodyParser()
// this will let us get the data from a POST
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Include Modules
var simpleMathSync = require('../app/ops/simpleOpsSync');
var simpleMathAsync = require('../app/ops/simpleOpsAsync');
var Operation = require('../app/models/operations');
var PerformanceData = require('../app/models/performanceData');
var count = 0;
var parsedJSON;


// Get and set Config details
var config = new Config('./app/config/math-config.json');
var port = process.env.PORT || config.port;
var mongoDbName = config.mongodb.dbname;
var mongodbHost = config.mongodb.host;
var mongodbPort = config.mongodb.port;
var mongodbConnectionStatus = false;

// connect to MongoDB database, in the event of an error ignore
var mongoose   = require('mongoose');
var mongoDb = null;
var mongoUrl = 'mongodb://'+mongodbHost + ':' + mongodbPort + '/' + mongoDbName;

mongoose.connect(mongoUrl, function (err, db){
    if (err) {
        mongodbConnectionStatus = false;
        console.log('MongoDb connection failed, all MongoDb calls will be ignored');
    } else {
        mongodbConnectionStatus = true;
        mongoDb = db;
        console.log('Connected to MongoDb on url ' + mongoUrl);


        // Flush DB and insert Performance Schema
        var promise = require('../app/utilities/utilityPromise');
        var perfDataArray = [];

        promise.flushDb(PerformanceData) // Remove old documents from the db
            .then(function() { // Read JSON filed
                return promise.readFilePromise('app/config/PerformanceDataSchema.json', 'utf8');
            })
            .then(function(resJson) { // build array of JSON records
                console.log(resJson);
                resJson = JSON.parse(resJson);
                parsedJSON = resJson;
                for (var  i = 0; i < resJson.records.length; i++) {
                    perfDataArray.push(resJson.records[i]);
                }
                return perfDataArray;
            })
            .then(function(array) { // populate DB with JSON records from the array
                promise.insertManyArrayToDB(PerformanceData, array);
                console.log();
            })
            .then(function() {
                console.log("PerformanceData records inserted");
            })
            .catch(function(err) {
                console.log("Error inserting PerformanceData records");
                console.log(err);
            });

    }
});

// Utility Functions - export later - not working yet
function getPerformanceDataId (operation) {
    for (var  i = 0; i < parsedJSON.records.length; i++) {
        if (operation == parsedJSON.records[i].operation) {
            return parsedJSON.records[i].id;
        }
    }
    return -1;
}

function updatePerformanceCounter (performanceId) {
    PerformanceData.find({id: performanceId}, function(err, obj) {
        count = obj[0].counter;
        count++;

        PerformanceData.update({id:performanceId},{counter:count},{}, function(err,callback){
            if (err) {
                console.log(err);
            } else {
                //console.log(callback);
            }
        });
    })
}

function getCounterValue (performanceId) {
    PerformanceData.find({id: performanceId}, function(err, obj) {
        if (err) {
            return -1;
        } else {
            return obj[0].counter;

        }
    });
}


// ROUTES FOR OUR API
// =============================================================================
var router = express.Router();              // get an instance of the express Router

// middleware to use for all requests
router.use(function(req, res, next) {
    // do logging
    //console.log('Something is happening.');
    next(); // make sure we go to the next routes and don't stop here
});


// test route to make sure everything is working (accessed at GET http://localhost:8080/api)
router.get('/', function(req, res) {
    res.json({ message: 'hooray! welcome to our api!' });
});

// more routes for our API will happen here
// ROUTES FOR OUR API
// =============================================================================

// more routes for our API will happen here

// on routes that end in /math
// ----------------------------------------------------
router.route('/math')

    // create a operation (accessed at POST http://localhost:8999/api/math)
    .post(function(req, res) {

        var operation = req.body.operation;
        var value1 = parseInt(req.body.value1);
        var value2 = parseInt(req.body.value2);
        var response = -1;

        if (operation == "add") {
            response = simpleMathSync.add(value1, value2);
            res.json({"response" : response});

        } else if (operation == "subtract") {
            simpleMathAsync.subtract(value1, value2, function (response) {
                res.json({"response": response
                });
            });

        } else if (operation == "multiply") {
            simpleMathAsync.multiply(value1, value2, function (response) {
                res.json({"response": response
                });
            });

        } else if (operation == "divide") {
            simpleMathAsync.divide(value1, value2, function (response) {
                res.json({"response": response
                });
            });

        } else if (operation == "sqrt") {
            simpleMathAsync.sqrt(value1, function (response) {
                res.json({"response": response
                });
            });

        } else {
            console.log ("Illegal Operation: " + operation);
            res.json({message: "Illegal Operation: " + operation})
        }

        console.log("Post for: "+ JSON.stringify(req.body, null, 4));

    })

    .put(function(req, res) {

        res.json({ message: "Put Operation not supported for MathApp" });

    })

    .get(function(req, res) {

        var operation = req.query.operation;
        var value1 = parseInt(req.query.value1);
        var value2 = parseInt(req.query.value2);
        var response = -1;

        if (mongodbConnectionStatus){
            var performanceId = getPerformanceDataId(operation);
        }


        if (operation == "add") {
            response = simpleMathSync.add(value1, value2);
            res.json({"response": response, responsecode:1 });

            if (mongodbConnectionStatus) {
                // perform db call after response is sent
                updatePerformanceCounter(performanceId);
            }


        } else if (operation == "subtract") {
            simpleMathAsync.subtract(value1, value2, function (response) {
                res.json({"response": response, responsecode: 1});

                if (mongodbConnectionStatus) {
                    // perform db call after response is sent
                    updatePerformanceCounter(performanceId);
                }
            });


        } else if (operation == "multiply") {
            simpleMathAsync.multiply(value1, value2, function (response) {
                res.json({"response": response, responsecode:1 });

                if (mongodbConnectionStatus) {
                    // perform db call after response is sent
                    updatePerformanceCounter(performanceId);
                }

            });

        } else if (operation == "divide") {
            simpleMathAsync.divide(value1, value2, function (response) {
                res.json({"response": response, responsecode:1 });

                if (mongodbConnectionStatus) {
                    // perform db call after response is sent
                    updatePerformanceCounter(performanceId);
                }

            });

        } else if (operation == "sqrt") {
            simpleMathAsync.sqrt(value1, function (response) {
                res.json({"response": response, responsecode:1 });

                if (mongodbConnectionStatus) {
                    // perform db call after response is sent
                    updatePerformanceCounter(performanceId);
                }

            });

        } else {
            console.log ("Illegal Operation: " + operation);
            res.json({message: "Illegal Operation: " + operation, responsecode: -1});

            if (mongodbConnectionStatus) {
                // perform db call after response is sent
                updatePerformanceCounter(performanceId);
            }
        }

    });

router.route('/math/:operation_id')

    // get the bear with that id (accessed at GET http://localhost:8999/api/math/:operation)
    .get(function(req, res) {
        console.log ('Math Operation Get is: ' + req.params.operation_id + ' for '+ req.body.value1);
        res.json({ message: 'Math Operation Get is: ' + req.params.operation_id});
    })

    // update operation with this id (accessed at PUT http://localhost:8999/api/math/:add)
    .put(function(req, res) {
        var value1 = req.body.value1;
        var value2 = req.body.value2;
        console.log ('Math Operation Put is: ' + req.body.operation_id +' for: '+ value1 + ' : ' + value2);
        res.json({ message: 'Math Operation Put is: ' + req.body.operation_id +' for: '+ value1 + ' : ' + value2});
    })

    // delete the bear with this id (accessed at DELETE http://localhost:8999/api/bears/:bear_id)
    .delete(function(req, res) {
        res.json({ message: 'Math Operation Delete is: ' + req.params.operation_id});
    });


router.route('/math/perf/:operation')
    .get(function(req,res){

        var opCount = getPerformanceDataId(req.params.operation, function(err, opId) {
            if (err) {
                console.log(err);
                res.json({response: err});
            } else {
                console.log("Performance id is: " + opId);
/*                getCounterValue(opId, function(err, opCount){
                    if (err) {
                        console.log(err);
                        res.json({response: err});
                    } else {
                        res.json({operation: req.params.operation, id: opId, count: opCount});
                    }
                });*/
            }
        });

       // console.log("*** count is: " + getCounterValue(req.params.operation));


})


// REGISTER OUR ROUTES -------------------------------
// all of our routes will be prefixed with /api
app.use('/api', router);

// START THE SERVER
// =============================================================================
app.listen(port);
console.log('MathApp Node Server listening on port ' + port);
